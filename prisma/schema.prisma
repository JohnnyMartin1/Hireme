// Datasource & generator
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ===== Enums =====

enum Role {
  JOB_SEEKER
  EMPLOYER
  ADMIN
}

enum WorkMode {
  ONSITE
  HYBRID
  REMOTE
}

enum DegreeType {
  HIGH_SCHOOL
  ASSOCIATE
  BACHELORS
  MASTERS
  MBA
  PHD
  BOOTCAMP
  OTHER
}

enum ExperienceLevel {
  INTERN
  ENTRY
  JUNIOR
  MID
  SENIOR
  LEAD
  MANAGER
  DIRECTOR
  EXECUTIVE
}

// ===== Core user & auth =====

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  passwordHash   String
  role           Role      @default(JOB_SEEKER)
  emailVerified  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  profile        Profile?
  employer       Employer?

  // messaging
  threads        ThreadParticipant[]
  messages       Message[]
}

model EmailToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  purpose   String   // "verify"
  expiresAt DateTime
  createdAt DateTime @default(now())
}

// ===== Candidate profile (rich) =====

model Profile {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id])

  firstName        String
  lastName         String
  headline         String?
  bio              String?

  graduationYear   Int?
  degreeType       DegreeType?
  major            String?
  gpa              Float?
  school           String?
  city             String?
  state            String?
  country          String?

  interests        String[]  // tags
  skills           String[]  // tags
  languages        String[]  // tags

  resumeUrl        String?
  videoUrl         String?
  websiteUrl       String?
  linkedinUrl      String?
  githubUrl        String?

  workModes        WorkMode[]
  workAuth         String[]  // e.g. ["US Citizen","H1B","CPT","OPT"]
  openToOpp        Boolean   @default(true)

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // messaging
  views            View[]
}

// ===== Employer & company =====

model Employer {
  id          String   @id @default(cuid())
  ownerId     String   @unique
  owner       User     @relation(fields: [ownerId], references: [id])

  companyName String
  website     String?
  location    String?
  description String?
  hiringRoles String[] // tags: "Software Engineer","Sales",â€¦

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // messaging
  views       View[]
}

// ===== Messaging system =====

model Thread {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  participants  ThreadParticipant[]
  messages      Message[]
}

model ThreadParticipant {
  id        String @id @default(cuid())
  threadId  String
  userId    String

  thread    Thread @relation(fields: [threadId], references: [id])
  user      User   @relation(fields: [userId], references: [id])

  @@unique([threadId, userId])
}

model Message {
  id         String   @id @default(cuid())
  threadId   String
  senderId   String
  body       String
  createdAt  DateTime @default(now())

  thread     Thread @relation(fields: [threadId], references: [id])
  sender     User   @relation(fields: [senderId], references: [id])
}

// ===== Analytics & tracking =====

model View {
  id         String   @id @default(cuid())
  employerId String
  profileId  String
  createdAt  DateTime @default(now())

  employer   Employer @relation(fields: [employerId], references: [id])
  profile    Profile  @relation(fields: [profileId], references: [id])

  @@index([employerId, profileId])
}
