// This Prisma schema defines the core data model for the HireMe application.
// It includes models for users, rich candidate profiles, employers, jobs,
// messaging, notifications and email verification tokens.

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------- Users & Auth ----------

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  passwordHash  String
  role          Role      @default(JOB_SEEKER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  profile       Profile?
  employer      Employer?
  messagesSent  Message[]      @relation("messagesSent")
  messagesRecv  Message[]      @relation("messagesRecv")
  notifications Notification[]
}

enum Role {
  JOB_SEEKER
  EMPLOYER
  ADMIN
}

// ---------- Candidate Profile (rich) ----------
// Keep most fields as simple strings/arrays for now so UI can evolve quickly.

model Profile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  // Basics
  firstName String
  lastName  String
  headline  String?
  bio       String?
  avatarUrl String?

  // Skills (legacy simple tags kept for quick cards)
  skills String[]

  // Links & contact
  website   String?
  linkedin  String?
  github    String?
  portfolio String?
  phone     String?

  // Location
  locationCity    String?
  locationState   String?
  locationCountry String?

  // Preferences
  desiredTitles    String[] // e.g. ["Marketing Analyst","Growth Associate"]
  desiredLocations String[] // e.g. ["NYC","Remote"]
  workModes        String[] // e.g. ["ONSITE","HYBRID","REMOTE"]
  workAuth         String?
  openToRelocate   Boolean?  @default(false)
  openToRemote     Boolean?  @default(true)
  startDate        DateTime?
  minSalary        Int?
  salaryCurrency   String?   @default("USD")
  yearsExperience  Int?

  // Education snapshot
  school         String?
  degreeType     String? // e.g. "BACHELORS", "MASTERS"
  major          String?
  graduationYear Int?
  gpa            Float?

  // Achievements / languages
  certifications String[]
  languages      String[]

  // Uploads
  resumeUrl String?
  videoUrl  String?

  // Visibility / misc
  seeking    String?
  visibility Boolean @default(true)
}

// ---------- Employers & Jobs ----------

model Employer {
  id            String  @id @default(cuid())
  userId        String  @unique
  user          User    @relation(fields: [userId], references: [id])
  companyName   String
  website       String?
  industry      String?
  about         String?
  locationCity  String?
  locationState String?
  jobs          Job[]

  @@index([industry], map: "employer_industry_idx")
}

model Job {
  id            String         @id @default(cuid())
  employerId    String
  employer      Employer       @relation(fields: [employerId], references: [id])
  title         String
  description   String
  locationCity  String?
  locationState String?
  employment    EmploymentType
  salaryMin     Int?
  salaryMax     Int?
  createdAt     DateTime       @default(now())
  isActive      Boolean        @default(true)
  tags          String[]

  @@index([title], map: "job_title_idx")
}

enum EmploymentType {
  INTERNSHIP
  PART_TIME
  FULL_TIME
  CONTRACT
}

// ---------- Messaging & Notifications ----------

model Message {
  id         String    @id @default(cuid())
  senderId   String
  receiverId String
  sender     User      @relation("messagesSent", fields: [senderId], references: [id])
  receiver   User      @relation("messagesRecv", fields: [receiverId], references: [id])
  body       String
  createdAt  DateTime  @default(now())
  readAt     DateTime?
  threadId   String
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  type      String
  payload   Json
  createdAt DateTime  @default(now())
  readAt    DateTime?
}

// ---------- Email Verification ----------

model EmailToken {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
}
